1. Order of Execution of SQL
  The order of execution in SQL queries is as follows:
  FROM - Specifies the tables to be queried.
  JOIN - Joins tables together, if specified.
  WHERE - Filters records based on conditions.
  GROUP BY - Groups records into summary rows.
  HAVING - Filters groups based on aggregate functions.
  SELECT - Chooses the columns to be returned.
  DISTINCT - Removes duplicate records.
  ORDER BY - Sorts the results.
  LIMIT / OFFSET - Limits the number of records returned.

2. Difference Between WHERE and HAVING
  WHERE: Filters rows before any groupings are made. Used with SELECT, UPDATE, DELETE.
  HAVING: Filters groups after aggregation. Typically used with GROUP BY.

3. Use of GROUP BY
  The GROUP BY clause is used to group rows that have the same values in specified columns into summary rows, like finding the sum or average of those groups.

4. Types of Joins in SQL
  INNER JOIN: Returns records with matching values in both tables.
  LEFT JOIN (or LEFT OUTER JOIN): Returns all records from the left table and matched records from the right table.
  RIGHT JOIN (or RIGHT OUTER JOIN): Returns all records from the right table and matched records from the left table.
  FULL JOIN (or FULL OUTER JOIN): Returns all records when there is a match in either left or right table records.
  CROSS JOIN: Returns the Cartesian product of two tables.

5. Triggers in SQL
  Triggers are special stored procedures that automatically execute in response to certain events on a particular table or view, like INSERT, UPDATE, or DELETE.

6. Stored Procedure in SQL
  A stored procedure is a precompiled collection of SQL statements stored in the database. It can take parameters and perform complex operations.

7. Types of Window Functions
  RANK(): Assigns a unique rank to rows within a partition.
  DENSE_RANK(): Similar to RANK(), but without gaps in the ranking.
  ROW_NUMBER(): Assigns a unique sequential integer to rows in the result set.
  LEAD(): Accesses data from the next row in the same result set without using a self-join.
  LAG(): Accesses data from the previous row in the same result set.

8. Difference Between DELETE and TRUNCATE
  DELETE: Removes rows from a table based on a condition; can be rolled back. Slower as it logs each row deletion.
  TRUNCATE: Removes all rows from a table without logging individual row deletions; faster, cannot be rolled back.

9. Difference Between DML, DDL, and DCL
  DML (Data Manipulation Language): Used to manipulate data (e.g., INSERT, UPDATE, DELETE).
  DDL (Data Definition Language): Defines database structure (e.g., CREATE, ALTER, DROP).
  DCL (Data Control Language): Controls access to data (e.g., GRANT, REVOKE).

10. Aggregate Functions
  Aggregate functions perform calculations on a set of values and return a single value. Common examples include:
  
  COUNT(): Counts the number of rows.
  SUM(): Calculates the sum of values.
  AVG(): Computes the average of values.
  Example:
  SELECT DepartmentID, COUNT(*) AS EmployeeCount  
  FROM Employees  
  GROUP BY DepartmentID;  

11. CTE vs. Subquery Performance
  Common Table Expressions (CTEs) and subqueries performance can vary based on the query structure and database optimization. CTEs can improve readability and organization, but the performance difference is usually negligible; it depends on the specific query plan generated by the SQL server.

12. Constraints and Types of Constraints
  Constraints are rules applied to columns in a database to ensure data integrity. Types include:

  PRIMARY KEY: Uniquely identifies each row.
  FOREIGN KEY: Ensures referential integrity between tables.
  UNIQUE: Ensures all values in a column are unique.
  CHECK: Validates data against a specified condition.
  NOT NULL: Ensures a column cannot have a NULL value.

13. Types of Keys
  Primary Key: Uniquely identifies each record.
  Foreign Key: Links records in two tables.
  Unique Key: Ensures all values in a column are unique.
  Composite Key: A primary key composed of multiple columns.

14. Different Types of Operators
  Arithmetic Operators: +, -, *, /.
  Comparison Operators: =, !=, <, >, <=, >=.
  Logical Operators: AND, OR, NOT.
  Bitwise Operators: &, |, ^, ~.

15. Difference Between GROUP BY and WHERE
  GROUP BY: Used to aggregate data in specific groups.
  WHERE: Used to filter records before grouping.

16. Views
  A view is a virtual table based on the result set of a SQL query. It can simplify complex queries and provide a level of security by restricting access to specific data.

17. Different Types of Constraints
  Same as question 12 regarding types of constraints.

18. Difference Between varchar and nvarchar
  varchar: Stores non-Unicode characters; uses 1 byte per character.
  nvarchar: Stores Unicode characters; uses 2 bytes per character, supporting multiple languages.

19. Difference Between char and nchar
  char: Fixed-length non-Unicode character data; pads with spaces.
  nchar: Fixed-length Unicode character data; pads with spaces, uses 2 bytes per character.

20. What is an Index?
  An index is a database object that speeds up the retrieval of rows from a table by creating a pointer to data in a table. Types include:

  Primary Index: Ensures uniqueness and organizes data.
  Secondary Index: Provides expedited access to rows based on non-primary key columns.

21. Indexes and Their Types
  Indexes improve the speed of data retrieval. Types include:

  Clustered Index: The data is stored in the order of the index.
  Non-Clustered Index: A separate structure that points back to the original table data.
  Unique Index: Ensures all values in the index are unique.

22. Types of Relationships in SQL
  One-to-One: A single record in one table is linked to a single record in another table.
  One-to-Many: A single record in one table can relate to multiple records in another table.
  Many-to-Many: Records in one table can relate to multiple records in another table via a junction table.

23. Difference Between UNION and UNION ALL
  UNION: Combines the results of two or more SELECT statements, removing duplicates.
  UNION ALL: Combines results and retains duplicates.

24. Types of Clauses in SQL
  Common clauses include:
  
  SELECT: Specifies columns.
  FROM: Specifies tables.
  WHERE: Filters records.
  GROUP BY: Groups records.
  HAVING: Filters groups.
  ORDER BY: Sorts results.
  LIMIT / OFFSET: Limits rows returned.

25. Similar to 23.
See question 23 for details.

26. Relationship Types
Similar to question 22.

27. Difference Between Primary Key and Secondary Key
  Primary Key: Uniquely identifies a record; cannot accept NULL values.
  Secondary Key: A non-unique key that can accept duplicates; used for searching.

28. Similar to 2.
See question 2 for details.

29. Find the Second Highest Salary of an Employee
  SELECT MAX(Salary) AS SecondHighestSalary   
  FROM Employees   
  WHERE Salary < (SELECT MAX(Salary) FROM Employees);  

30. Write Retention Query in SQL
  Retention queries can vary based on the retention policy. Here's an example of deleting records older than a specific date:

  DELETE FROM YourTable  
  WHERE YourDateColumn < DATEADD(YEAR, -1, GETDATE());  

31. Write Year-on-Year Growth in SQL
  SELECT YEAR(OrderDate) AS OrderYear,   
         SUM(OrderAmount) AS TotalRevenue,  
         LAG(SUM(OrderAmount)) OVER (ORDER BY YEAR(OrderDate)) AS PreviousYearRevenue,  
         (SUM(OrderAmount) - LAG(SUM(OrderAmount)) OVER (ORDER BY YEAR(OrderDate))) /   
         LAG(SUM(OrderAmount)) OVER (ORDER BY YEAR(OrderDate)) * 100 AS YoYGrowthPercentage  
  FROM Orders  
  GROUP BY YEAR(OrderDate);  

32. Write a Query for Cumulative Sum in SQL
  SELECT OrderID, OrderDate,   
         SUM(OrderAmount) OVER (ORDER BY OrderDate) AS CumulativeTotal  
  FROM Orders;  

33. Difference Between Function and Stored Procedure
  Function: Returns a single value, can be used in a SQL statement, does not have side effects.
  Stored Procedure: Has no return value, can return multiple values via output parameters, generally includes business logic.

34. Use of Variables in Views
  No, you cannot use variables directly in views. Views are not designed to accept parameters.

35. Limitations of Views in MS SQL Server
  Views do not store data; they require the underlying table(s) to exist.
  They cannot be indexed directly.
  Performance can degrade for complex views due to execution of the underlying query for each access.
  Certain functionalities (e.g., triggers) cannot be used with views.
