‚úÖ Week 4: Expert Level & Best Practices
üéØ Goal: Write optimized LINQ code, understand how LINQ interacts with EF Core, and apply it in real-world reporting scenarios.

üî∂ Day 22-23: LINQ with EF Core
üîπ 1. How LINQ is Translated into SQL
LINQ queries in EF Core are parsed and converted into SQL queries by EF Core‚Äôs query provider.

Example:
var result = dbContext.Employees
                      .Where(e => e.Salary > 50000)
                      .Select(e => new { e.Name, e.Salary })
                      .ToList();
‚úÖ This will be converted into SQL query and run on the DB server, not in memory.

üîπ 2. Performance Tips
Use ToList() wisely: Avoid calling it too early. Fetch only when needed.

Use AsEnumerable():
Converts query to in-memory, useful for client-side evaluation (e.g., C# functions).

Use AsQueryable():
Converts in-memory collections to LINQ queries.

‚úÖ Example: In-memory vs Server-side Evaluation
// Server-side
var result = dbContext.Employees
                      .Where(e => e.Name.StartsWith("A"))
                      .ToList();

// Client-side evaluation (less optimal if ToList is early)
var result = dbContext.Employees
                      .AsEnumerable()
                      .Where(e => e.Name.StartsWith("A"));

‚ùì Most Asked Interview Questions

‚úÖ 1. How is LINQ translated to SQL in EF Core?
EF Core translates LINQ queries into SQL only when the query is executed. This process is known as query translation.

üîç Behind the scenes:
When you write:
var result = context.Employees.Where(e => e.Salary > 50000).ToList();

EF Core:
Parses the expression tree from LINQ.

Converts it to a SQL query.
Sends it to the database.
Maps the result back to C# objects.

üß† Example:
var employees = context.Employees
                       .Where(e => e.Location == "Hyderabad")
                       .Select(e => new { e.Name, e.Salary })
                       .ToList();
üü¢ Translates to SQL like:
SELECT Name, Salary FROM Employees WHERE Location = 'Hyderabad';

‚ùó If EF Core cannot translate part of your query (e.g., a custom method), you'll get a runtime error like:
"The LINQ expression could not be translated..."
‚úÖ Use AsEnumerable() or client-side logic only when needed (explained below).


‚úÖ 2. Difference between AsEnumerable, ToList, AsQueryable

Method	        Purpose	                                                        Execution	Translation Impact
AsEnumerable()	Converts query to in-memory LINQ-to-Objects	                    Deferred	Stops EF SQL translation; runs in memory
ToList()      	Executes query and returns List<T>	                            Immediate	Executes SQL query immediately
AsQueryable()	  Useful when switching back to IQueryable after LINQ-to-Object	  Deferred	Rarely needed; used in dynamic queries

üß† Example:
var data = context.Employees
                  .AsEnumerable() // Data comes into memory here
                  .Where(e => CustomFilter(e));
Here, CustomFilter can be any C# method ‚Äî it will work because the data is already in memory.

‚úÖ 3. When to use ToList() vs Deferred Execution (like IEnumerable / IQueryable)

Scenario	                                  Use ToList()	                  Use Deferred (IEnumerable / IQueryable)
When you want immediate results	                ‚úÖ	                            ‚ùå
When you need to perform multiple iterations	  ‚úÖ Avoid repeated DB hits      	‚ùå Each query execution goes to DB
When you‚Äôre layering logic dynamically	        ‚ùå	                            ‚úÖ Use IQueryable to chain filters
For performance & memory management	            ‚ùå If you expect large data    	‚úÖ Filter on DB side before pulling data

üß† Examples:
// ‚úÖ Deferred Execution (chained filters, efficient)
var query = context.Employees.Where(e => e.Salary > 50000);
if (isHyderabad)
    query = query.Where(e => e.Location == "Hyderabad");

// Actual SQL is executed here
var result = query.ToList();
// ‚ùå Inefficient - Pulls everything, then filters
var employees = context.Employees.ToList(); // huge data!
var filtered = employees.Where(e => e.Salary > 50000);

üî∂ Day 24-25: Complex Transformations
üîπ 1. Grouping With Conditions
var result = employees
             .GroupBy(e => e.DeptId)
             .Select(g => new {
                 DeptId = g.Key,
                 HighEarners = g.Where(e => e.Salary > 50000).ToList()
             });

üîπ 2. Multiple Joins and Filters
var result = from e in employees
             join d in departments on e.DeptId equals d.Id
             join p in projects on e.Id equals p.EmpId
             where e.Salary > 50000 && d.Name == "IT"
             select new { e.Name, d.Name, p.ProjectName };

üîπ 3. Conditional Projections
var result = employees.Select(e => new {
    e.Name,
    SalaryStatus = e.Salary > 60000 ? "High" : e.Salary > 50000 ? "Medium" : "Low"
});

‚ùì Most Asked Interview Questions

‚úÖ 1. How do you write a LINQ query with multiple joins and conditions?
You can write multiple joins using either query syntax or method syntax. Let's use method syntax with a practical example:

üßæ Scenario:
Get employee name, department name, and city only if salary > 50000 and department is IT.

‚úÖ Example:
var result = employees
    .Join(departments,
          e => e.DeptId,
          d => d.Id,
          (e, d) => new { e, d })
    .Where(x => x.e.Salary > 50000 && x.d.Name == "IT")
    .Select(x => new
    {
        EmployeeName = x.e.Name,
        DepartmentName = x.d.Name,
        City = x.e.Location
    });

‚úÖ 2. Can you group data with a filter condition?
Yes! You can group by any key and apply conditions either:

Before grouping (recommended)

Or after grouping using where, SelectMany, or Where on grouped items.

üßæ Scenario:
Group employees by department and only include those with salary > 50000.

‚úÖ Example:
var result = employees
    .Where(e => e.Salary > 50000)
    .GroupBy(e => e.DeptId)
    .Select(g => new
    {
        DeptId = g.Key,
        HighEarners = g.ToList()
    });
‚úÖ You can also join to get Department names:
var result = employees
    .Where(e => e.Salary > 50000)
    .GroupBy(e => e.DeptId)
    .Join(departments,
          g => g.Key,
          d => d.Id,
          (g, d) => new
          {
              Department = d.Name,
              Count = g.Count()
          });

‚úÖ 3. How do you use ternary operators in Select projection?
Ternary operators (condition ? trueResult : falseResult) are powerful for conditional values during projection.

üßæ Scenario:
Project employee name and a status: "High" if salary > 50000, else "Low".

‚úÖ Example:
var result = employees
    .Select(e => new
    {
        e.Name,
        SalaryStatus = e.Salary > 50000 ? "High" : "Low"
    });
‚úÖ You can chain multiple ternary conditions:

var result = employees
    .Select(e => new
    {
        e.Name,
        SalaryLevel = e.Salary > 80000 ? "Platinum" :
                      e.Salary > 60000 ? "Gold" :
                      e.Salary > 40000 ? "Silver" : "Bronze"
    });




üî∂ Day 26-27: Avoiding Pitfalls
üîπ 1. Deferred vs Immediate Execution

Deferred: Query is not executed until enumerated (IQueryable, IEnumerable)
Immediate: Executes immediately (ToList, First, Count)

var query = dbContext.Employees.Where(e => e.Salary > 50000); // Deferred

var list = query.ToList(); // Now it's executed

üîπ 2. Common Performance Mistakes

Mistake	Correction
Calling .ToList() too early	Chain filters before materializing
Using AsEnumerable() before filter	Filters won't translate to SQL
Large Select without projection	Use projection to select only needed columns

‚ùì Most Asked Interview Questions

‚úÖ 1. What are Deferred and Immediate Executions in LINQ?
üß† Concept:

Term	Meaning
Deferred Execution	The query is not executed until you iterate it (e.g., using foreach, .ToList(), .Count())
Immediate Execution	The query is executed immediately when you call methods like .ToList(), .Count(), .First()
‚úÖ Example of Deferred Execution:
var query = context.Employees.Where(e => e.Salary > 50000); // not yet executed

// Executed here
foreach (var emp in query)
{
    Console.WriteLine(emp.Name);
}

‚úÖ Example of Immediate Execution:
var result = context.Employees
                    .Where(e => e.Salary > 50000)
                    .ToList(); // Executed now and data is in memory
üîç Tip:
Deferred execution allows query composition, i.e., adding filters before execution.

‚úÖ 2. Why is calling .ToList() early a bad idea?
‚ùå Problem:
Calling .ToList() too early brings data into memory before applying all filters or joins ‚Äî leading to:

Huge memory consumption
Slow performance
Unnecessary DB hits

‚ùó Bad Example:
var list = context.Employees.ToList(); // loads all employees
var result = list.Where(e => e.Salary > 50000); // filtering in-memory

‚úÖ Optimized Example:
var result = context.Employees
                    .Where(e => e.Salary > 50000)
                    .ToList(); // filter done in SQL, faster!
üîã Best Practice: Push filters to SQL as much as possible before calling .ToList()


‚úÖ 3. How do you optimize LINQ queries for performance?
Here are practical tips to write optimized LINQ with EF Core:

Practice	                                            Example	                              Why
‚úÖ Filter before .ToList()	                          .Where(...).ToList()	                Reduces data fetched
‚úÖ Use .Select() to fetch only required columns	      .Select(e => new { e.Id, e.Name })	  Avoids pulling unnecessary fields
‚úÖ Use .Any() instead of .Count() > 0	                .Any(e => e.Salary > 50000)	          Faster SQL
‚úÖ Use AsNoTracking() for read-only queries	          context.Employees.AsNoTracking()	    Improves performance by skipping change tracking
‚úÖ Avoid ToList() inside loops	                      Cache results outside loop	          Prevents repeated DB calls
‚úÖ Use FirstOrDefault() or SingleOrDefault() wisely	  Filters and limits results	          Avoids full table scans
‚úÖ Watch out for N+1 issues in joins	                Use .Include() or .Join()	            Reduces multiple round-trips

üß™ Real-life Example:
‚ùå Bad:
var employees = context.Employees.ToList();
var highEarners = employees.Where(e => e.Salary > 50000).ToList();

‚úÖ Good:
var highEarners = context.Employees
                         .Where(e => e.Salary > 50000)
                         .ToList();





üî∂ Day 28: Capstone Practice
‚úÖ Mini Project: Employee Management Reporting Console App
üìå Goal: Perform advanced filtering, grouping, and report generation using LINQ.

üìÅ Data Setup (Mock Data)
public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int DeptId { get; set; }
    public double Salary { get; set; }
    public string Location { get; set; }
}
public class Department
{
    public int Id { get; set; }
    public string Name { get; set; }
}

üîç Functional Requirements
List all employees by department.
Filter high earners by location.
Group employees by department and count.
Find average salary by location.
Top 3 highest-paid employees.
Create dictionary DeptName => List<Employee>
Employees whose name starts with A and are from IT.
Employee count per salary range.
All employees who belong to departments without any other employee.
Project final report to console.

üì¶ Sample Output

===== Department: HR =====
Alice (60000) - Hyderabad
Bob (50000) - Hyderabad

===== High Earners in Bangalore =====
David (70000)

===== Employees per Department =====
HR - 2
IT - 1
Finance - 0

===== Top 3 Salaries =====
David - 70000
Alice - 60000
Bob - 50000



‚úÖ Answer:

using System;
using System.Collections.Generic;
using System.Linq;

public class Program
{
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int DeptId { get; set; }
        public double Salary { get; set; }
        public string Location { get; set; }
    }

    public class Department
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public static void Main()
    {
        var departments = new List<Department>
        {
            new Department { Id = 1, Name = "HR" },
            new Department { Id = 2, Name = "IT" },
            new Department { Id = 3, Name = "Finance" }
        };

        var employees = new List<Employee>
        {
            new Employee { Id = 1, Name = "Alice", DeptId = 1, Salary = 60000, Location = "Hyderabad" },
            new Employee { Id = 2, Name = "Bob", DeptId = 1, Salary = 50000, Location = "Hyderabad" },
            new Employee { Id = 3, Name = "David", DeptId = 2, Salary = 70000, Location = "Bangalore" },
            new Employee { Id = 4, Name = "Arun", DeptId = 2, Salary = 45000, Location = "Bangalore" },
            new Employee { Id = 5, Name = "Eve", DeptId = 1, Salary = 40000, Location = "Chennai" },
            new Employee { Id = 6, Name = "Frank", DeptId = 3, Salary = 30000, Location = "Hyderabad" }
        };

        // 1. List all employees by department
        Console.WriteLine("===== Employees by Department =====");
        var empByDept = employees.GroupBy(e => e.DeptId);
        foreach (var group in empByDept)
        {
            var deptName = departments.FirstOrDefault(d => d.Id == group.Key)?.Name;
            Console.WriteLine($"\n===== Department: {deptName} =====");
            foreach (var emp in group)
                Console.WriteLine($"{emp.Name} ({emp.Salary}) - {emp.Location}");
        }

        // 2. Filter high earners by location (Salary > 60000 in Bangalore)
        Console.WriteLine("\n===== High Earners in Bangalore =====");
        var highEarners = employees
            .Where(e => e.Salary > 60000 && e.Location == "Bangalore");
        foreach (var emp in highEarners)
            Console.WriteLine($"{emp.Name} ({emp.Salary})");

        // 3. Group employees by department and count
        Console.WriteLine("\n===== Employees per Department =====");
        var empCount = departments
            .GroupJoin(employees,
                       d => d.Id,
                       e => e.DeptId,
                       (d, emps) => new { d.Name, Count = emps.Count() });
        foreach (var item in empCount)
            Console.WriteLine($"{item.Name} - {item.Count}");

        // 4. Find average salary by location
        Console.WriteLine("\n===== Average Salary by Location =====");
        var avgByLocation = employees
            .GroupBy(e => e.Location)
            .Select(g => new { Location = g.Key, AvgSalary = g.Average(e => e.Salary) });
        foreach (var item in avgByLocation)
            Console.WriteLine($"{item.Location} - {item.AvgSalary}");

        // 5. Top 3 highest-paid employees
        Console.WriteLine("\n===== Top 3 Salaries =====");
        var top3 = employees
            .OrderByDescending(e => e.Salary)
            .Take(3);
        foreach (var emp in top3)
            Console.WriteLine($"{emp.Name} - {emp.Salary}");

        // 6. Dictionary DeptName => List<Employee>
        Console.WriteLine("\n===== Department Dictionary =====");
        var deptDict = departments
            .ToDictionary(
                d => d.Name,
                d => employees.Where(e => e.DeptId == d.Id).ToList()
            );
        foreach (var kv in deptDict)
        {
            Console.WriteLine($"\n{kv.Key}:");
            foreach (var emp in kv.Value)
                Console.WriteLine($"- {emp.Name}");
        }

        // 7. Employees whose name starts with A and are from IT
        Console.WriteLine("\n===== Employees with 'A' from IT =====");
        var itDeptId = departments.First(d => d.Name == "IT").Id;
        var aItEmployees = employees
            .Where(e => e.Name.StartsWith("A") && e.DeptId == itDeptId);
        foreach (var emp in aItEmployees)
            Console.WriteLine($"{emp.Name} - {emp.Salary}");

        // 8. Employee count per salary range
        Console.WriteLine("\n===== Employee Count per Salary Range =====");
        var salaryGroups = employees
            .GroupBy(e => e.Salary switch
            {
                < 40000 => "Low",
                >= 40000 and < 60000 => "Medium",
                _ => "High"
            });
        foreach (var group in salaryGroups)
            Console.WriteLine($"{group.Key}: {group.Count()}");

        // 9. Employees who are the only one in their department
        Console.WriteLine("\n===== Solo Employees per Department =====");
        var soloEmp = employees
            .GroupBy(e => e.DeptId)
            .Where(g => g.Count() == 1)
            .SelectMany(g => g);
        foreach (var emp in soloEmp)
            Console.WriteLine($"{emp.Name} - {emp.Salary}");

        // 10. Final Project Report
        Console.WriteLine("\n===== Final Report =====");
        foreach (var dept in departments)
        {
            Console.WriteLine($"\nDepartment: {dept.Name}");
            var deptEmps = employees.Where(e => e.DeptId == dept.Id).ToList();
            if (deptEmps.Any())
                foreach (var emp in deptEmps)
                    Console.WriteLine($"- {emp.Name} ({emp.Salary}) - {emp.Location}");
            else
                Console.WriteLine("No employees found.");
        }
    }
}

‚úÖ  Output
===== Employees by Department =====

===== Department: HR =====
Alice (60000) - Hyderabad
Bob (50000) - Hyderabad
Eve (40000) - Chennai

===== Department: IT =====
David (70000) - Bangalore
Arun (45000) - Bangalore

===== Department: Finance =====
Frank (30000) - Hyderabad

===== High Earners in Bangalore =====
David (70000)

===== Employees per Department =====
HR - 3
IT - 2
Finance - 1

===== Average Salary by Location =====
Hyderabad - 46666.666666666664
Bangalore - 57500
Chennai - 40000

===== Top 3 Salaries =====
David - 70000
Alice - 60000
Bob - 50000

===== Department Dictionary =====

HR:
- Alice
- Bob
- Eve

IT:
- David
- Arun

Finance:
- Frank

===== Employees with 'A' from IT =====
Arun - 45000

===== Employee Count per Salary Range =====
High: 2
Medium: 3
Low: 1

===== Solo Employees per Department =====
Frank - 30000

===== Final Report =====

Department: HR
- Alice (60000) - Hyderabad
- Bob (50000) - Hyderabad
- Eve (40000) - Chennai

Department: IT
- David (70000) - Bangalore
- Arun (45000) - Bangalore

Department: Finance
- Frank (30000) - Hyderabad
