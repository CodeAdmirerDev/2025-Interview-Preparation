✅ 1. Sort employees by Salary (desc) and Name (asc)
Code:
var employees = new List<Employee> {
    new Employee("Suri", 90000),
    new Employee("Monica", 95000),
    new Employee("Ravi", 90000),
};

var result = employees.OrderByDescending(e => e.Salary)
                      .ThenBy(e => e.Name);

foreach (var e in result)
    Console.WriteLine($"{e.Name} - {e.Salary}");

Output:
Monica - 95000
Ravi - 90000
Suri - 90000

✅ 2. Group students by Grade and count
Code:
var students = new List<Student> {
    new Student("A"),
    new Student("B"),
    new Student("A")
};

var result = students.GroupBy(s => s.Grade)
                     .Select(g => new { Grade = g.Key, Count = g.Count() });

foreach (var group in result)
    Console.WriteLine($"{group.Grade} - {group.Count}");
Output:
A - 2
B - 1

✅ 3. Departments with Avg Salary > 50000
Code:
var employees = new List<Employee> {
    new Employee("Suri", "IT", 60000),
    new Employee("Monica", "HR", 40000),
    new Employee("Ravi", "IT", 70000)
};

var result = employees.GroupBy(e => e.Department)
                      .Where(g => g.Average(e => e.Salary) > 50000)
                      .Select(g => g.Key);

foreach (var dept in result)
    Console.WriteLine(dept);
Output:
IT

✅ 4. Top 3 most expensive products
Code:
var products = new List<Product> {
    new Product("A", 100),
    new Product("B", 300),
    new Product("C", 200),
    new Product("D", 400)
};

var result = products.OrderByDescending(p => p.Price).Take(3);

foreach (var p in result)
    Console.WriteLine($"{p.Name} - {p.Price}");
Output:
D - 400
B - 300
C - 200

✅ 5. Count of employees in each department
Code:
var employees = new List<Employee> {
    new Employee("Suri", "IT"),
    new Employee("Ravi", "IT"),
    new Employee("Monica", "HR")
};

var result = employees.GroupBy(e => e.Department)
                      .Select(g => new { Dept = g.Key, Count = g.Count() });

foreach (var group in result)
    Console.WriteLine($"{group.Dept} - {group.Count}");

Output:
IT - 2
HR - 1

✅ 6. Check if any employee has salary over 100000
var employees = new List<Employee> {
    new Employee("Suri", 90000),
    new Employee("Monica", 120000)
};

bool hasHighSalary = employees.Any(e => e.Salary > 100000);
Console.WriteLine(hasHighSalary);

Output:
True

✅ 7. Check if all employees belong to “Tech” department
var employees = new List<Employee> {
    new Employee("Suri", "Tech"),
    new Employee("Ravi", "Tech")
};

bool allInTech = employees.All(e => e.Department == "Tech");
Console.WriteLine(allInTech);

Output:
True

✅ 8. Sum of all product prices
var products = new List<Product> {
    new Product("P1", 100),
    new Product("P2", 300)
};

var total = products.Sum(p => p.Price);
Console.WriteLine(total);

Output:
400

✅ 9. Max salary in each department
var employees = new List<Employee> {
    new Employee("A", "IT", 60000),
    new Employee("B", "IT", 70000),
    new Employee("C", "HR", 50000)
};

var result = employees.GroupBy(e => e.Department)
                      .Select(g => new { Dept = g.Key, MaxSal = g.Max(e => e.Salary) });

foreach (var item in result)
    Console.WriteLine($"{item.Dept} - {item.MaxSal}");
Output:
IT - 70000  
HR - 50000

✅ 10. Combine employee names into comma-separated string
var names = new List<string> { "Suri", "Monica", "Ravi" };
var result = names.Aggregate((a, b) => a + ", " + b);
Console.WriteLine(result);

Output:
Suri, Monica, Ravi

✅ 11. Distinct department names from employee list
var employees = new List<Employee> {
    new Employee("A", "IT"),
    new Employee("B", "HR"),
    new Employee("C", "IT")
};

var departments = employees.Select(e => e.Department).Distinct();
foreach (var dept in departments)
    Console.WriteLine(dept);
Output:
IT  
HR

✅ 12. Group books by author and count
var books = new List<Book> {
    new Book("Book1", "AuthorA"),
    new Book("Book2", "AuthorB"),
    new Book("Book3", "AuthorA")
};

var result = books.GroupBy(b => b.Author)
                  .Select(g => new { Author = g.Key, Count = g.Count() });

foreach (var group in result)
    Console.WriteLine($"{group.Author} - {group.Count}");
Output:
AuthorA - 2  
AuthorB - 1

✅ 13. Check if product ID exists using Contains

var productIds = new List<int> { 1, 2, 3 };
bool exists = productIds.Contains(2);
Console.WriteLine(exists);

Output:
True

✅ 14. Sort orders by Date, then Amount
var orders = new List<Order> {
    new Order(DateTime.Parse("2023-01-01"), 500),
    new Order(DateTime.Parse("2023-01-01"), 300),
    new Order(DateTime.Parse("2023-01-02"), 700)
};

var result = orders.OrderBy(o => o.Date).ThenBy(o => o.Amount);
foreach (var o in result)
    Console.WriteLine($"{o.Date.ToShortDateString()} - {o.Amount}");
Output:
01/01/2023 - 300  
01/01/2023 - 500  
01/02/2023 - 700

✅ 15. Min and Max age of employees
var ages = new List<int> { 25, 32, 29 };
Console.WriteLine($"Min: {ages.Min()}, Max: {ages.Max()}");
Output:
Min: 25, Max: 32

✅ 16. Group employees and get list of names per department
var employees = new List<Employee> {
    new Employee("Suri", "IT"),
    new Employee("Monica", "HR"),
    new Employee("Ravi", "IT")
};

var result = employees.GroupBy(e => e.Department)
                      .Select(g => new { Dept = g.Key, Names = g.Select(x => x.Name).ToList() });

foreach (var group in result)
    Console.WriteLine($"{group.Dept}: {string.Join(", ", group.Names)}");
Output:
IT: Suri, Ravi  
HR: Monica

✅ 17. Total experience per department
var employees = new List<Employee> {
    new Employee("Suri", "IT", 5),
    new Employee("Monica", "IT", 3),
    new Employee("Ravi", "HR", 4)
};

var result = employees.GroupBy(e => e.Department)
                      .Select(g => new { Dept = g.Key, TotalExp = g.Sum(e => e.Experience) });

foreach (var group in result)
    Console.WriteLine($"{group.Dept} - {group.TotalExp} years");
Output:
IT - 8 years  
HR - 4 years

✅ 18. All students scored above 40
var marks = new List<int> { 45, 67, 80 };
bool passed = marks.All(m => m > 40);
Console.WriteLine(passed);
Output:
True

✅ 19. Group customers by city and count
var customers = new List<Customer> {
    new Customer("Suri", "Hyderabad"),
    new Customer("Monica", "Mumbai"),
    new Customer("Ravi", "Hyderabad")
};

var result = customers.GroupBy(c => c.City)
                      .Select(g => new { City = g.Key, Count = g.Count() });

foreach (var group in result)
    Console.WriteLine($"{group.City} - {group.Count}");
Output:
Hyderabad - 2  
Mumbai - 1

✅ 20. Average product rating
var reviews = new List<Review> {
    new Review(4),
    new Review(5),
    new Review(3)
};

var avg = reviews.Average(r => r.Rating);
Console.WriteLine($"Average: {avg}");
Output:
Average: 4


