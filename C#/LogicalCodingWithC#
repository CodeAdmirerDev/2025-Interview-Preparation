Here are all 20 C# logical coding problems again with sample input/output, making them ready for practice or revision. I've wrapped each example in a Main method style so you can test easily.

✅ 1. Reverse a String
string input = "hello";
string result = new string(input.Reverse().ToArray());
Console.WriteLine(result); // Output: olleh

✅ 2. Palindrome String
string input = "madam";
bool isPalindrome = input.SequenceEqual(input.Reverse());
Console.WriteLine(isPalindrome); // Output: True

✅ 3. Count Vowels and Consonants
string input = "Hello World";
int vowels = 0, consonants = 0;
foreach (char c in input.ToLower())
{
    if ("aeiou".Contains(c)) vowels++;
    else if (char.IsLetter(c)) consonants++;
}
Console.WriteLine($"Vowels: {vowels}, Consonants: {consonants}");
// Output: Vowels: 3, Consonants: 7

✅ 4. First Non-Repeating Character

string input = "swiss";
char result = input.GroupBy(c => c)
                   .Where(g => g.Count() == 1)
                   .Select(g => g.Key)
                   .FirstOrDefault();
Console.WriteLine(result); // Output: w

✅ 5. Check Anagrams
string s1 = "listen", s2 = "silent";
bool areAnagrams = string.Concat(s1.OrderBy(c => c)) == string.Concat(s2.OrderBy(c => c));
Console.WriteLine(areAnagrams); // Output: True

✅ 6. Max and Min in Array
int[] arr = { 10, 5, 8, 20, 3 };
Console.WriteLine($"Max: {arr.Max()}, Min: {arr.Min()}"); 
// Output: Max: 20, Min: 3

✅ 7. Remove Duplicates
int[] arr = { 1, 2, 2, 3, 4, 4 };
var result = arr.Distinct();
Console.WriteLine(string.Join(", ", result)); 
// Output: 1, 2, 3, 4

✅ 8. Second Highest Number
int[] arr = { 10, 5, 8, 20, 3 };
int second = arr.Distinct().OrderByDescending(x => x).Skip(1).First();
Console.WriteLine(second); // Output: 10

✅ 9. Missing Number (1 to N)
int[] arr = { 1, 2, 3, 5 };
int n = 5;
int missing = n * (n + 1) / 2 - arr.Sum();
Console.WriteLine(missing); // Output: 4

✅ 10. Check Duplicate
int[] arr = { 1, 2, 3, 4, 2 };
bool hasDup = arr.Length != arr.Distinct().Count();
Console.WriteLine(hasDup); // Output: True

✅ 11. Prime Number
int num = 13;
bool isPrime = num > 1 && Enumerable.Range(2, (int)Math.Sqrt(num) - 1)
                                    .All(i => num % i != 0);
Console.WriteLine(isPrime); // Output: True

✅ 12. Fibonacci Series
int n = 7;
int a = 0, b = 1;
for (int i = 0; i < n; i++)
{
    Console.Write(a + " ");
    int temp = a; a = b; b = temp + b;
}
// Output: 0 1 1 2 3 5 8

✅ 13. Palindrome Number
int num = 121, original = num, rev = 0;
while (num > 0)
{
    rev = rev * 10 + num % 10;
    num /= 10;
}
Console.WriteLine(original == rev); // Output: True

✅ 14. Armstrong Number
int num = 153, sum = 0, temp = num;
int digits = num.ToString().Length;
while (temp > 0)
{
    int d = temp % 10;
    sum += (int)Math.Pow(d, digits);
    temp /= 10;
}
Console.WriteLine(sum == num); // Output: True

✅ 15. GCD & LCM
int a = 12, b = 18;
int GCD(int x, int y)
{
    while (y != 0) { int t = y; y = x % y; x = t; }
    return x;
}
int gcd = GCD(a, b);
int lcm = (a * b) / gcd;
Console.WriteLine($"GCD: {gcd}, LCM: {lcm}");
// Output: GCD: 6, LCM: 36

✅ 16. Pyramid Pattern
int rows = 3;
for (int i = 1; i <= rows; i++)
{
    Console.Write(new string(' ', rows - i));
    Console.WriteLine(new string('*', i * 2 - 1));
}
// Output:
//   *
//  ***
// *****

✅ 17. Pascal’s Triangle
int rows = 5;
for (int i = 0; i < rows; i++)
{
    int val = 1;
    for (int j = 0; j <= i; j++)
    {
        Console.Write(val + " ");
        val = val * (i - j) / (j + 1);
    }
    Console.WriteLine();
}
// Output:
// 1
// 1 1
// 1 2 1
// 1 3 3 1
// 1 4 6 4 1

✅ 18. Diamond Pattern
int n = 3;
for (int i = 1; i <= n; i++)
    Console.WriteLine(new string(' ', n - i) + new string('*', i * 2 - 1));
for (int i = n - 1; i >= 1; i--)
    Console.WriteLine(new string(' ', n - i) + new string('*', i * 2 - 1));
// Output:
//   *
//  ***
// *****
//  ***
//   *

✅ 19. Reverse a Number
int num = 456, rev = 0;
while (num != 0)
{
    rev = rev * 10 + num % 10;
    num /= 10;
}
Console.WriteLine(rev); // Output: 654

✅ 20. Frequency Using Dictionary

int[] arr = { 1, 2, 2, 3, 1, 4 };
var dict = new Dictionary<int, int>();
foreach (var i in arr)
    if (dict.ContainsKey(i)) dict[i]++;
    else dict[i] = 1;

foreach (var kvp in dict)
    Console.WriteLine($"{kvp.Key}: {kvp.Value}");
// Output:
// 1: 2
// 2: 2
// 3: 1
// 4: 1
