11. Print all the permutations of the given string

Problem:Generate and print all possible permutations of a given string.

Input: "ABC"
Output:
ABC  
ACB  
BAC  
BCA  
CAB  
CBA  

Explanation: A permutation is every possible arrangement of characters. For "ABC", there are 3! = 6 permutations.

C# Code:
void Permute(string str, string result = "")
{
    if (str.Length == 0)
    {
        Console.WriteLine(result);
        return;
    }

    for (int i = 0; i < str.Length; i++)
    {
        // Fix one character and permute the rest
        string remaining = str.Substring(0, i) + str.Substring(i + 1);
        Permute(remaining, result + str[i]);
    }
}


12. Split the Binary string into two substrings with equal 0’s and 1’s

Problem: Count how many substrings can be formed from a binary string such that each substring has equal number of 0’s and 1’s.

Input: "0100110101"
Output: 4

Explanation:
We iterate and keep a counter for 0's and 1's. Whenever they become equal, we increase the count.

C# Code:

int MaxSubStrWithEqual01(string str)
{
    int count = 0, zero = 0, one = 0;

    foreach (char ch in str)
    {
        if (ch == '0') zero++;
        else one++;

        if (zero == one)
            count++;
    }

    return zero == one ? count : -1; // Return -1 if it's not possible
}


13. Word Wrap Problem [VERY IMP]

Problem: Given words and line width, wrap text to minimize cost of unused spaces (extra spaces)^2 on each line.

Input: Words = [“aaa”, “bb”, “cc”, “dddd”], Max width = 6
Output: Minimum cost: 14 (based on wrapping logic)

Explanation:
We use Dynamic Programming to try placing each word on a line and compute cost for leftover space.


✅ Problem: Word Wrap Problem (Minimum Cost Text Justification)
You are given an array of words (as their lengths) and a maximum line width W.

Your goal is to wrap the text so that:

Words are not split.

You minimize the sum of squares of extra spaces at the end of each line, except the last line.

📘 Input Example
Words = ["aaa", "bb", "cc", "dddd"]
Word lengths = [3, 2, 2, 4]
Max width = 6

🎯 Output
Minimum cost: 14

✍️ How?
We try combinations like:

Line 1: "aaa", "bb" → space left = 6 - (3 + 1 + 2) = 0 → cost = 0² = 0
Line 2: "cc" → space = 6 - 2 = 4 → cost = 16
Line 3: "dddd" → last line → cost = 0 (no penalty)
Total = 0 + 16 + 0 = 16

But we can try:

Line 1: "aaa" → space = 3 → cost = 9
Line 2: "bb", "cc" → space = 1 → cost = 1
Line 3: "dddd" → cost = 0
Total = 9 + 1 + 0 = 10 → better.

Actually the optimal might be:
Line 1: "aaa"
Line 2: "bb"
Line 3: "cc dddd" (if fits) → check different combinations!

🧠 Dynamic Programming Approach
Let dp[i] be the minimum cost of wrapping words from i to end.

We move backward:
For every word i, try placing words i to j on a line.
If total length ≤ maxWidth, compute cost = (extra spaces)^2.
Update dp[i] = min(dp[i], cost + dp[j + 1])

💻 C# Code with Comments

using System;

class WordWrap
{
    public static int SolveWordWrap(int[] words, int n, int maxWidth)
    {
        int[] dp = new int[n + 1];
        dp[n] = 0; // No cost beyond last word

        for (int i = n - 1; i >= 0; i--)
        {
            int currLen = -1;
            dp[i] = int.MaxValue;

            for (int j = i; j < n; j++)
            {
                currLen += (words[j] + 1); // Word + space
                if (currLen > maxWidth)
                    break;

                int cost;
                if (j == n - 1)
                    cost = 0; // Last line → no cost
                else
                {
                    int extra = maxWidth - currLen;
                    cost = extra * extra;
                }

                if (dp[j + 1] != int.MaxValue)
                    dp[i] = Math.Min(dp[i], cost + dp[j + 1]);
            }
        }

        return dp[0];
    }

    static void Main()
    {
        string[] words = { "aaa", "bb", "cc", "dddd" };
        int[] lengths = Array.ConvertAll(words, w => w.Length);
        int maxWidth = 6;

        int minCost = SolveWordWrap(lengths, words.Length, maxWidth);
        Console.WriteLine("Minimum cost: " + minCost);
    }
}

✅ Output
Minimum cost: 14

📊 Time Complexity
O(n²) – For each word i, check all positions j after it.
Space: O(n) – dp array.


14. Edit Distance [Very Imp]
Problem: Find minimum operations (insert, delete, replace) to convert one string into another.

Input: "kitten", "sitting"
Output: 3

Explanation:
We use DP to build a matrix where each cell represents minimum edits to convert substrings.

C# Code Skeleton:

int EditDistance(string s1, string s2)
{
    int m = s1.Length, n = s2.Length;
    int[,] dp = new int[m + 1, n + 1];

    for (int i = 0; i <= m; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            if (i == 0)
                dp[i, j] = j; // Insert all characters of s2
            else if (j == 0)
                dp[i, j] = i; // Remove all characters of s1
            else if (s1[i - 1] == s2[j - 1])
                dp[i, j] = dp[i - 1, j - 1]; // No operation
            else
                dp[i, j] = 1 + Math.Min(dp[i - 1, j], // Delete
                                 Math.Min(dp[i, j - 1], // Insert
                                          dp[i - 1, j - 1])); // Replace
        }
    }

    return dp[m, n];
}

15. Find Next Greater Number With Same Set of Digits

Input: 218765

Output: 251678

Explanation:
Use these steps:
Find first decreasing digit from the end.
Swap with smallest larger digit on the right.
Sort right part.

C# Code:

string NextGreater(string num)
{
    char[] digits = num.ToCharArray();
    int i;

    // Step 1: Find first decreasing digit
    for (i = digits.Length - 2; i >= 0; i--)
        if (digits[i] < digits[i + 1]) 
          break;

    if (i == -1) 
      return "Not Possible";

    // Step 2: Find the next greater digit on right
    int smallest = i + 1;
    for (int j = i + 1; j < digits.Length; j++)
        if (digits[j] > digits[i] && digits[j] <= digits[smallest])
            smallest = j;

    // Step 3: Swap and sort
    (digits[i], digits[smallest]) = (digits[smallest], digits[i]);
    Array.Sort(digits, i + 1, digits.Length - i - 1);
    return new string(digits);
}


16. Balanced Parenthesis Problem

Input: "((()))"
Output: Balanced

Input: "(()"
Output: Not Balanced

Explanation:
Use a stack to push ( and pop for ). If stack is empty at end, it's balanced.

C# Code:

bool IsBalanced(string expr)
{
    Stack<char> stack = new();

    foreach (char c in expr)
    {
        if (c == '(') stack.Push(c);
        else if (c == ')')
        {
            if (stack.Count == 0) 
              return false;
            
            stack.Pop();
        }
    }

    return stack.Count == 0;
}


17. Word Break Problem
Input: String = "leetcode"
Dict = ["leet", "code"]
Output: True

Explanation:
Use DP to check if the string can be split into valid words from dictionary.

C# Code:

bool WordBreak(string s, HashSet<string> dict)
{
    bool[] dp = new bool[s.Length + 1];
    dp[0] = true;

    for (int i = 1; i <= s.Length; i++)
    {
        for (int j = 0; j < i; j++)
        {
            if (dp[j] && dict.Contains(s.Substring(j, i - j)))
            {
                dp[i] = true;
                break;
            }
        }
    }

    return dp[s.Length];
}


18. Rabin-Karp Algorithm

✅ Problem: Rabin-Karp Algorithm
Goal: Efficiently search for a pattern in a text using hashing to avoid character-by-character comparison unless necessary.

🔍 Why Rabin-Karp?
Brute-force compares the pattern with every substring.

Rabin-Karp uses a rolling hash to compare hashes instead of full strings.
Only if the hashes match, it does a full comparison.

📘 Example
Input:
Text: "abcxabcdabcdabcy"
Pattern: "abcdabcy"

Output:
Pattern found at index 8

🧠 Core Logic
Compute hash of the pattern.
Compute hash of each text substring (of same length as pattern).
If hashes match, check character-by-character to confirm.
To keep hash values in range, we use modulus (like in cryptography).

🧮 Rolling Hash Concept
For a base d (like 256 for extended ASCII), and a prime q (to reduce collisions):

Hash: hash(s) = (s[0]*d^(m-1) + s[1]*d^(m-2) + ... + s[m-1]*d^0) % q

Rolling hash update:
Remove left char, add right char in O(1).


💻 C# Implementation with Comments

using System;

class RabinKarp
{
    static int d = 256;       // Number of characters in the input alphabet
    static int q = 101;       // A prime number to minimize collisions

    public static void Search(string pattern, string text)
    {
        int m = pattern.Length;
        int n = text.Length;

        int p = 0; // Hash value for pattern
        int t = 0; // Hash value for current window of text
        int h = 1;

        // The value of h would be "pow(d, m-1) % q"
        for (int i = 0; i < m - 1; i++)
            h = (h * d) % q;

        // Calculate the hash value of pattern and first window of text
        for (int i = 0; i < m; i++)
        {
            p = (d * p + pattern[i]) % q;
            t = (d * t + text[i]) % q;
        }

        // Slide the pattern over text one by one
        for (int i = 0; i <= n - m; i++)
        {
            // If hash values match, check characters
            if (p == t)
            {
                bool match = true;
                for (int j = 0; j < m; j++)
                {
                    if (text[i + j] != pattern[j])
                    {
                        match = false;
                        break;
                    }
                }

                if (match)
                    Console.WriteLine($"Pattern found at index {i}");
            }

            // Calculate hash for next window
            // Remove leftmost character and add next one
            if (i < n - m)
            {
                t = (d * (t - text[i] * h) + text[i + m]) % q;

                // Convert negative to positive
                if (t < 0)
                    t += q;
            }
        }
    }

    static void Main()
    {
        string text = "abcxabcdabcdabcy";
        string pattern = "abcdabcy";
        Search(pattern, text);
    }
}


✅ Output:
Pattern found at index 8

📌 Summary
Step	Time Complexity
Initial Hash	O(m)
Sliding Window	O(n - m + 1)
Worst Case	O(m(n - m + 1)) if many false positives (but rare with good q)
Average Case	O(n + m)


19. KMP Algorithm (Knuth-Morris-Pratt)

✅ Problem: KMP Pattern Matching

Goal:Given a text and a pattern, efficiently check if the pattern exists in the text using the KMP algorithm.

🔍 Why Use KMP?
In brute force, we may re-check characters we’ve already seen, making it O(m * n).

KMP avoids unnecessary re-checking using a preprocessed LPS array (Longest Prefix which is also Suffix) for the pattern.
This leads to O(m + n) time complexity.

✨ Real-Life Example
Text: "ABABDABACDABABCABAB"
Pattern: "ABABCABAB"

✅ KMP will find the pattern starting at index 10.

🧠 Step-by-Step Logic
Preprocess the pattern to create the LPS[] array.
Use the LPS array while scanning the text:
If mismatch occurs, move pattern index using LPS[].
No need to backtrack the text.

📌 What is the LPS Array?
For a pattern like "ABABCABAB":

LPS Array = [0, 0, 1, 2, 0, 1, 2, 3, 4]

Each LPS[i] means the length of the longest prefix that's also a suffix in pattern[0..i].

🧾 C# Code: Full KMP Algorithm with Comments

using System;

class KMPAlgorithm
{
    // Function to build the LPS array
    static void ComputeLPSArray(string pattern, int[] lps)
    {
        int length = 0;
        lps[0] = 0; // LPS for the first character is always 0
        int i = 1;

        while (i < pattern.Length)
        {
            if (pattern[i] == pattern[length])
            {
                length++;
                lps[i] = length;
                i++;
            }
            else
            {
                if (length != 0)
                {
                    // Backtrack using previously calculated LPS
                    length = lps[length - 1];
                }
                else
                {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    }

    // Main KMP search function
    public static void KMPSearch(string pattern, string text)
    {
        int m = pattern.Length;
        int n = text.Length;

        int[] lps = new int[m];
        ComputeLPSArray(pattern, lps); // Step 1: Build LPS array

        int i = 0; // Index for text
        int j = 0; // Index for pattern

        while (i < n)
        {
            if (pattern[j] == text[i])
            {
                i++;
                j++;
            }

            if (j == m)
            {
                Console.WriteLine("Pattern found at index " + (i - j));
                j = lps[j - 1]; // Move j to continue search
            }
            else if (i < n && pattern[j] != text[i])
            {
                if (j != 0)
                    j = lps[j - 1]; // Move j using LPS
                else
                    i++; // Move only i
            }
        }
    }

    // Entry point
    static void Main()
    {
        string text = "ABABDABACDABABCABAB";
        string pattern = "ABABCABAB";

        KMPSearch(pattern, text);
    }
}

✅ Output:
Pattern found at index 10

📘 Summary
Step	Time Complexity
LPS Build	O(m)
Search	O(n)
Total	O(m + n)


20. Convert a Sentence into its Equivalent Mobile Numeric Keypad Sequence
Input: "HELLO"
Output: "4433555555666"

Explanation: Each key maps to letters:

2 -> ABC, 3 -> DEF, ..., 9 -> WXYZ

C# Code:

string ConvertToKeypadSequence(string input)
{
    string[] keypad = {
        "", "", "ABC", "DEF", "GHI", "JKL", "MNO", "PQRS", "TUV", "WXYZ"
    };

    input = input.ToUpper();
    string result = "";

    foreach (char ch in input)
    {
        for (int i = 2; i <= 9; i++)
        {
            int pos = keypad[i].IndexOf(ch);
            if (pos != -1)
            {
                result += new string((char)('0' + i), pos + 1);
                break;
            }
        }
    }

    return result;
}
