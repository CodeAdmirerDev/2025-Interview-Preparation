26) Find Whether an Array is a Subset of Another Array
Problem: Given two arrays: arr1 (main) and arr2 (subset candidate), check if all elements of arr2 are present in arr1.

Approach: Use a HashSet for fast lookup.

Code (C#):
public bool IsSubset(int[] arr1, int[] arr2)
{
    var set = new HashSet<int>(arr1);
    foreach (var item in arr2)
    {
        if (!set.Contains(item))
            return false;
    }
    return true;
}

Input: arr1 = [1, 2, 3, 4, 5], arr2 = [2, 4]
Output: True


27) Find the Triplet That Sums to a Given Value

Problem: Given an array and a number X, find whether any triplet in the array sums to X.

Approach: Sort the array.

Fix one element and use two-pointer approach for the remaining.

Code (C#):

public bool FindTriplet(int[] arr, int sum)
{
    Array.Sort(arr);
    for (int i = 0; i < arr.Length - 2; i++)
    {
        int l = i + 1, r = arr.Length - 1;
        while (l < r)
        {
            int currSum = arr[i] + arr[l] + arr[r];
            if (currSum == sum)
                return true;
            else if (currSum < sum)
                l++;
            else
                r--;
        }
    }
    return false;
}

Input: [12, 3, 4, 1, 6, 9], sum = 24
Output: True (e.g., 12 + 3 + 9)

28) Trapping Rain Water Problem

Problem: Given an array representing heights of bars, compute how much water it can trap after raining.

Approach: Precompute leftMax[i] and rightMax[i] for each position.
Water trapped at i = min(leftMax[i], rightMax[i]) - height[i]

Code (C#):

public int TrapRainWater(int[] height)
{
    int n = height.Length;
    if (n == 0) return 0;

    int[] leftMax = new int[n];
    int[] rightMax = new int[n];

    leftMax[0] = height[0];
    for (int i = 1; i < n; i++)
        leftMax[i] = Math.Max(leftMax[i - 1], height[i]);

    rightMax[n - 1] = height[n - 1];
    for (int i = n - 2; i >= 0; i--)
        rightMax[i] = Math.Max(rightMax[i + 1], height[i]);

    int water = 0;
    for (int i = 0; i < n; i++)
        water += Math.Min(leftMax[i], rightMax[i]) - height[i];

    return water;
}

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

29) Chocolate Distribution Problem
Problem: Given an array of packet sizes and m students, distribute packets such that the difference between max and min chocolates given is minimum.

Approach: Sort array and find the minimum difference in any window of size m.

Code (C#):

public int MinChocolateDifference(int[] packets, int m)
{
    if (packets.Length < m) return -1;
    Array.Sort(packets);

    int minDiff = int.MaxValue;
    for (int i = 0; i + m - 1 < packets.Length; i++)
    {
        int diff = packets[i + m - 1] - packets[i];
        minDiff = Math.Min(minDiff, diff);
    }

    return minDiff;
}
Input: [7, 3, 2, 4, 9, 12, 56], m = 3
Output: 2 (Choose packets [2, 3, 4])

30) Smallest Subarray with Sum Greater Than a Given Value
Problem: Given an array and value x, find the smallest length of a contiguous subarray with sum > x.

Approach: Use sliding window technique.

Code (C#):

public int SmallestSubarray(int[] arr, int x)
{
    int n = arr.Length, sum = 0, minLen = n + 1;
    int start = 0, end = 0;

    while (end < n)
    {
        while (sum <= x && end < n)
            sum += arr[end++];

        while (sum > x && start < n)
        {
            minLen = Math.Min(minLen, end - start);
            sum -= arr[start++];
        }
    }

    return minLen == n + 1 ? 0 : minLen;
}
Input: [1, 4, 45, 6, 0, 19], x = 51
Output: 3 (subarray is [4, 45, 6])
