31) Three-way Partitioning of an Array Around a Given Value

Problem: Given an array and a range [lowVal, highVal], rearrange the array so that:
Elements < lowVal come first,
Elements in range [lowVal, highVal] come next,
Elements > highVal come last.

Approach: Dutch National Flag algorithm (three-pointers).

Code (C#):
public void ThreeWayPartition(int[] arr, int lowVal, int highVal)
{
    int start = 0, end = arr.Length - 1;
    int i = 0;
    while (i <= end)
    {
        if (arr[i] < lowVal)
            (arr[i++], arr[start++]) = (arr[start], arr[i]);
        else if (arr[i] > highVal)
            (arr[i], arr[end--]) = (arr[end], arr[i]);
        else
            i++;
    }
}

Input: [1, 4, 3, 2, 5, 6], lowVal = 2, highVal = 4
Output: [1, 2, 3, 4, 6, 5] (order inside segments doesn’t matter)

32) Minimum Swaps Required to Bring Elements ≤ K Together
Problem: Given an array and integer K, find minimum number of swaps required to bring all elements ≤ K together.

Approach:
Count all elements ≤ K → that’s our window size.
Slide the window, count elements > K inside it (bad ones), track the min of these.

Code (C#):

public int MinSwapsToBringKTogether(int[] arr, int k)
{
    int n = arr.Length;
    int count = arr.Count(x => x <= k);

    int bad = arr.Take(count).Count(x => x > k);
    int minSwaps = bad;

    for (int i = 0, j = count; j < n; i++, j++)
    {
        if (arr[i] > k) bad--;
        if (arr[j] > k) bad++;
        minSwaps = Math.Min(minSwaps, bad);
    }

    return minSwaps;
}
Input: [2, 1, 5, 6, 3], K = 3
Output: 1

32.1) Minimum Operations to Make Array a Palindrome
Problem: Find the minimum number of merge operations to make an array a palindrome (merging adjacent elements).

Approach:

Use two pointers from start and end.
If elements are equal, move both inwards.
If not, merge the smaller one with its neighbor and count the operation.

Code (C#):

public int MinOpsToMakePalindrome(int[] arr)
{
    int i = 0, j = arr.Length - 1, ops = 0;

    while (i < j)
    {
        if (arr[i] == arr[j])
        {
            i++; j--;
        }
        else if (arr[i] < arr[j])
        {
            arr[i + 1] += arr[i];
            i++; ops++;
        }
        else
        {
            arr[j - 1] += arr[j];
            j--; ops++;
        }
    }

    return ops;
}
Input: [1, 4, 5, 1]
Output: 1 (merge 4 and 5 to make [1, 9, 1])

33) Median of Two Sorted Arrays of Equal Size
Approach: Merge logic with two pointers or binary search-based recursive approach.

Simplified Merge Approach:

public double MedianOfTwoEqualSorted(int[] a, int[] b)
{
    int n = a.Length, i = 0, j = 0, count = 0;
    int m1 = -1, m2 = -1;

    for (count = 0; count <= n; count++)
    {
        if (i == n)
        {
            m1 = m2;
            m2 = b[0];
            break;
        }
        else if (j == n)
        {
            m1 = m2;
            m2 = a[0];
            break;
        }

        if (a[i] <= b[j])
        {
            m1 = m2;
            m2 = a[i++];
        }
        else
        {
            m1 = m2;
            m2 = b[j++];
        }
    }

    return (m1 + m2) / 2.0;
}
Input: [1, 12, 15, 26, 38], [2, 13, 17, 30, 45]
Output: 16.0

34) Median of Two Sorted Arrays of Different Sizes
Problem: Return the median of two sorted arrays of different sizes.

Approach: Binary search on the smaller array (O(log(min(n, m))) time).

Code (C#):

public double FindMedianSortedArrays(int[] nums1, int[] nums2)
{
    if (nums1.Length > nums2.Length)
        return FindMedianSortedArrays(nums2, nums1);

    int x = nums1.Length, y = nums2.Length;
    int low = 0, high = x;

    while (low <= high)
    {
        int partitionX = (low + high) / 2;
        int partitionY = (x + y + 1) / 2 - partitionX;

        int maxLeftX = (partitionX == 0) ? int.MinValue : nums1[partitionX - 1];
        int minRightX = (partitionX == x) ? int.MaxValue : nums1[partitionX];

        int maxLeftY = (partitionY == 0) ? int.MinValue : nums2[partitionY - 1];
        int minRightY = (partitionY == y) ? int.MaxValue : nums2[partitionY];

        if (maxLeftX <= minRightY && maxLeftY <= minRightX)
        {
            if ((x + y) % 2 == 0)
                return (Math.Max(maxLeftX, maxLeftY) + Math.Min(minRightX, minRightY)) / 2.0;
            else
                return Math.Max(maxLeftX, maxLeftY);
        }
        else if (maxLeftX > minRightY)
            high = partitionX - 1;
        else
            low = partitionX + 1;
    }

    throw new InvalidOperationException();
}
Input: [1, 3], [2]
Output: 2.0

35) Largest Number by Joining Numbers
Problem: Given a list of non-negative integers, arrange them such that they form the largest number.

Approach:

Convert integers to strings.
Sort using custom comparator: (x + y) > (y + x).
Join sorted strings.

Code (C#):

public string LargestNumber(int[] nums)
{
    var strs = nums.Select(n => n.ToString()).ToList();
    strs.Sort((a, b) => (b + a).CompareTo(a + b));

    if (strs[0] == "0") return "0"; // To handle all zeros

    return string.Join("", strs);
}

Input: [3, 30, 34, 5, 9]
Output: "9534330"
