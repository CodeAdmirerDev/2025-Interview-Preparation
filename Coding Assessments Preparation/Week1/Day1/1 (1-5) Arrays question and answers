1) Reverse the Array
Explanation: To reverse an array, swap elements from the start and end until you reach the middle.

using System;  
class Program {  
    static void ReverseArray(int[] arr) {  
        int start = 0, end = arr.Length - 1;  
        while (start < end) {  
            int temp = arr[start];  
            arr[start] = arr[end];  
            arr[end] = temp;  
            start++;  
            end--;  
        }  
    }  

    static void Main() {  
        int[] arr = {1, 2, 3, 4, 5};  
        Console.WriteLine("Original: " + string.Join(", ", arr));  
        ReverseArray(arr);  
        Console.WriteLine("Reversed: " + string.Join(", ", arr));  
    }  
}  

Input: [1, 2, 3, 4, 5]

Output:
Original: 1, 2, 3, 4, 5  
Reversed: 5, 4, 3, 2, 1  

2) Find the Kth Max and Min element of an array
Explanation: Sort the array first, then pick elements at k-1 for minimum and Length-k for maximum.

using System;  
class Program {  
    static void KthMinMax(int[] arr, int k) {  
        Array.Sort(arr);  
        Console.WriteLine($"Kth Minimum element is {arr[k-1]}");  
        Console.WriteLine($"Kth Maximum element is {arr[arr.Length - k]}");  
    }  

    static void Main() {  
        int[] arr = {7, 10, 4, 3, 20, 15};  
        int k = 3;  
        KthMinMax(arr, k);  
    }  
}  

Input: [7, 10, 4, 3, 20, 15], k=3
Output:
Kth Minimum element is 7  
Kth Maximum element is 10  


3) Sort array of 0s, 1s and 2s without sorting algorithm (Dutch National Flag problem)
Explanation: Use three pointers, low, mid, and high, and swap to place 0s at start, 1s in middle, and 2s at end.

using System;  
class Program {  
    static void Sort012(int[] arr) {  
        int low = 0, mid = 0, high = arr.Length - 1;  
        while (mid <= high) {  
            if (arr[mid] == 0) {  
                (arr[low], arr[mid]) = (arr[mid], arr[low]);  
                low++; mid++;  
            } else if (arr[mid] == 1) {  
                mid++;  
            } else {  
                (arr[mid], arr[high]) = (arr[high], arr[mid]);  
                high--;  
            }  
        }  
    }  

    static void Main() {  
        int[] arr = {0, 1, 2, 0, 1, 2, 1, 0};  
        Console.WriteLine("Original: " + string.Join(", ", arr));  
        Sort012(arr);  
        Console.WriteLine("Sorted: " + string.Join(", ", arr));  
    }  
}  

Input: [0, 1, 2, 0, 1, 2, 1, 0]
Output:
Original: 0, 1, 2, 0, 1, 2, 1, 0  
Sorted: 0, 0, 0, 1, 1, 1, 2, 2  


4) Move all negative elements to one side of the array
Explanation: Use partition logic like in QuickSort â€” keep two pointers to segregate negative and non-negative.

using System;  
class Program {  
    static void MoveNegativesToLeft(int[] arr) {  
        int j = 0;  
        for (int i = 0; i < arr.Length; i++) {  
            if (arr[i] < 0) {  
                (arr[i], arr[j]) = (arr[j], arr[i]);  
                j++;  
            }  
        }  
    }  

    static void Main() {  
        int[] arr = { -1, 2, -3, 4, 5, -6 };  
        Console.WriteLine("Before: " + string.Join(", ", arr));  
        MoveNegativesToLeft(arr);  
        Console.WriteLine("After: " + string.Join(", ", arr));  
    }  
}  

Input: [-1, 2, -3, 4, 5, -6]
Output:
Before: -1, 2, -3, 4, 5, -6  
After: -1, -3, -6, 4, 5, 2  


5) Find Union and Intersection of two arrays
Explanation: Use hash sets to keep track of unique elements for union and intersection.

using System;  
using System.Collections.Generic;  
class Program {  
    static void UnionIntersection(int[] arr1, int[] arr2) {  
        HashSet<int> set1 = new HashSet<int>(arr1);  
        HashSet<int> set2 = new HashSet<int>(arr2);  

        // Union  
        HashSet<int> union = new HashSet<int>(set1);  
        union.UnionWith(set2);  

        // Intersection  
        HashSet<int> intersection = new HashSet<int>(set1);  
        intersection.IntersectWith(set2);  

        Console.WriteLine("Union: " + string.Join(", ", union));  
        Console.WriteLine("Intersection: " + string.Join(", ", intersection));  
    }  

    static void Main() {  
        int[] arr1 = {1, 2, 3, 4, 5};  
        int[] arr2 = {3, 4, 5, 6, 7};  
        UnionIntersection(arr1, arr2);  
    }  
}  

Input: [1, 2, 3, 4, 5] and [3, 4, 5, 6, 7]
Output:
Union: 1, 2, 3, 4, 5, 6, 7  
Intersection: 3, 4, 5  
