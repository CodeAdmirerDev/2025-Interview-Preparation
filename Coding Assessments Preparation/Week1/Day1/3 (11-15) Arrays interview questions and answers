11) Merge 2 Sorted Arrays Without Using Extra Space
Explanation: Use two pointers, swap elements when necessary, then sort both arrays.

using System;  
class Program {  
    static void MergeWithoutExtraSpace(int[] arr1, int[] arr2) {  
        int n = arr1.Length, m = arr2.Length;  
        int i = 0, j = 0;  

        while (i < n && j < m) {  
            if (arr1[i] > arr2[j]) {  
                (arr1[i], arr2[j]) = (arr2[j], arr1[i]);  
                i++;  
                j++;  
            } else {  
                i++;  
            }  
        }  
        Array.Sort(arr1);  
        Array.Sort(arr2);  
    }  

    static void Main() {  
        int[] arr1 = {1, 5, 9, 10, 15, 20};  
        int[] arr2 = {2, 3, 8, 13};  

        Console.WriteLine("Before Merge:");  
        Console.WriteLine("Arr1: " + string.Join(", ", arr1));  
        Console.WriteLine("Arr2: " + string.Join(", ", arr2));  

        MergeWithoutExtraSpace(arr1, arr2);  

        Console.WriteLine("After Merge:");  
        Console.WriteLine("Arr1: " + string.Join(", ", arr1));  
        Console.WriteLine("Arr2: " + string.Join(", ", arr2));  
    }  
}  

Input:
arr1 = [1,5,9,10,15,20], arr2 = [2,3,8,13]

Output:

Before Merge:  
Arr1: 1, 5, 9, 10, 15, 20  
Arr2: 2, 3, 8, 13  

After Merge:  
Arr1: 1, 2, 3, 5, 8, 9  
Arr2: 10, 13, 15, 20  

12) Kadane’s Algorithm (Repeated for emphasis)
Find largest sum contiguous subarray — already explained in #7, here’s a quick snippet for convenience:

using System;  
class Program {  
    static int Kadane(int[] arr) {  
        int maxEndingHere = arr[0], maxSoFar = arr[0];  
        for (int i = 1; i < arr.Length; i++) {  
            maxEndingHere = Math.Max(arr[i], maxEndingHere + arr[i]);  
            maxSoFar = Math.Max(maxSoFar, maxEndingHere);  
        }  
        return maxSoFar;  
    }  

    static void Main() {  
        int[] arr = {-2, -3, 4, -1, -2, 1, 5, -3};  
        Console.WriteLine("Maximum subarray sum: " + Kadane(arr));  
    }  
}  
Output:

bash
Maximum subarray sum: 7  

13) Merge Intervals
Explanation: Sort intervals by start time, merge overlapping intervals.

using System;  
using System.Collections.Generic;  

class Interval {  
    public int start, end;  
    public Interval(int s, int e) {start = s; end = e;}  
    public override string ToString() => $"[{start}, {end}]";  
}  

class Program {  
    static List<Interval> MergeIntervals(List<Interval> intervals) {  
        if (intervals.Count == 0) return intervals;  

        intervals.Sort((a, b) => a.start.CompareTo(b.start));  
        List<Interval> merged = new List<Interval>();  
        Interval current = intervals[0];  

        foreach (var interval in intervals) {  
            if (interval.start <= current.end) {  
                current.end = Math.Max(current.end, interval.end);  
            } else {  
                merged.Add(current);  
                current = interval;  
            }  
        }  
        merged.Add(current);  
        return merged;  
    }  

    static void Main() {  
        var intervals = new List<Interval> {  
            new Interval(1, 3),  
            new Interval(2, 6),  
            new Interval(8, 10),  
            new Interval(15, 18)  
        };  
        var res = MergeIntervals(intervals);  
        Console.WriteLine("Merged intervals:");  
        foreach (var iv in res) Console.WriteLine(iv);  
    }  
}  

Input: [[1,3], [2,6], [8,10], [15,18]]

Output:
Merged intervals:  
[1, 6]  
[8, 10]  
[15, 18]  

14) Next Permutation
Explanation: Modify array in-place to next lexicographically greater permutation.

using System;  
class Program {  
    static void NextPermutation(int[] nums) {  
        int i = nums.Length - 2;  
        while (i >= 0 && nums[i] >= nums[i + 1]) i--;  

        if (i >= 0) {  
            int j = nums.Length - 1;  
            while (nums[j] <= nums[i]) j--;  
            (nums[i], nums[j]) = (nums[j], nums[i]);  
        }  

        Reverse(nums, i + 1, nums.Length - 1);  
    }  

    static void Reverse(int[] nums, int start, int end) {  
        while (start < end) {  
            (nums[start], nums[end]) = (nums[end], nums[start]);  
            start++; end--;  
        }  
    }  

    static void Main() {  
        int[] nums = {1, 2, 3};  
        NextPermutation(nums);  
        Console.WriteLine("Next permutation: " + string.Join(", ", nums));  
    }  
}  

Input: [1, 2, 3]
Output:
Next permutation: 1, 3, 2  

15) Count Inversion in an Array
Explanation: Number of pairs (i, j) where i < j but arr[i] > arr[j]. Use merge sort modification.

using System;  
class Program {  
    static int MergeSortAndCount(int[] arr, int l, int r) {  
        int count = 0;  
        if (l < r) {  
            int mid = (l + r) / 2;  
            count += MergeSortAndCount(arr, l, mid);  
            count += MergeSortAndCount(arr, mid + 1, r);  
            count += Merge(arr, l, mid, r);  
        }  
        return count;  
    }  

    static int Merge(int[] arr, int l, int mid, int r) {  
        int[] left = new int[mid - l + 1];  
        int[] right = new int[r - mid];  

        Array.Copy(arr, l, left, 0, left.Length);  
        Array.Copy(arr, mid + 1, right, 0, right.Length);  

        int i = 0, j = 0, k = l, swaps = 0;  
        while (i < left.Length && j < right.Length) {  
            if (left[i] <= right[j]) {  
                arr[k++] = left[i++];  
            } else {  
                arr[k++] = right[j++];  
                swaps += (mid + 1) - (l + i);  
            }  
        }  
        while (i < left.Length) arr[k++] = left[i++];  
        while (j < right.Length) arr[k++] = right[j++];  
        return swaps;  
    }  

    static void Main() {  
        int[] arr = {1, 20, 6, 4, 5};  
        int result = MergeSortAndCount(arr, 0, arr.Length - 1);  
        Console.WriteLine("Number of inversions: " + result);  
    }  
}  

Input: [1, 20, 6, 4, 5]
Output:
Number of inversions: 5  
